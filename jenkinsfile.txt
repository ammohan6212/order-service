pipeline{
    agent any

    stages{
        stage("detect the programming language"){
            steps {
                script {
                    echo "üîç Detecting language based on dependency files in src/..."

                    if (fileExists('requirements.txt')) {
                        DETECTED_LANG = 'python'
                    } else if (fileExists('package.json')) {
                        DETECTED_LANG = 'node'
                    } else if (fileExists('go.mod')) {
                        DETECTED_LANG = 'go'
                    } else if (fileExists('pom.xml') || fileExists('src/build.gradle')) {
                        DETECTED_LANG = 'java'
                    } else if (fileExists('Cargo.toml')) {
                        DETECTED_LANG = 'rust'
                    } else {
                        DETECTED_LANG = 'unknown'
                    }

                    echo "‚úÖ Detected Language: ${DETECTED_LANG}"
                }
            }
        }
        stage("development workflow") {
            agent any
            when {
                branch 'dev'
            }
            stages{
                stage("clone the repo with dev branch"){
                    steps {
                        script{
                            // Clone the dev branch
                            git branch: 'dev',url: "https://github.com/ammohan6212/front-end.git"
                            // git branch: 'dev',credentialsId: 'github-token',url: "https://github.com/ammohan6212/front-end.git"

                            // Fetch all tags
                            sh 'git fetch --tags'

                            // Get the latest tag correctly
                            def version = sh(
                                script: "git describe --tags \$(git rev-list --tags --max-count=1)",
                                returnStdout: true
                            ).trim()
                            env.version = version
                            echo "VERSION=${env.VERSION}"
                        }
                        
                    }
                }
            
                stage('get the current application version'){
                    steps{
                        script{
                            echo "VERSION=${env.version}"
                        }
                    }
                }
                stage("linting the code"){
                    steps{
                        script{
                            echo "Linting the  dependencies for ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                flake src/
                                pylint src/   ##we will rate about our code
                                black src/
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx eslint --init
                                npm init @eslint/config@latest
                                npm audit fix --force
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh 'golangci-lint run src/'
                            } else if (DETECTED_LANG == 'java') {
                                sh 'mvn checkstyle:check '
                            } else if (DETECTED_LANG == 'rust') {
                                sh 'cargo clippy'
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("infrastrucure linting"){
                    steps {
                        script{
                            sh """
                            #tflint  terraform/
                            """
                        }
                    }
                }
                stage("perform the code kubeernetes linintg"){
                    steps{
                        script{
                            sh """
                            # .gobin/kube-linter kubernetes/
                            """
                        }
                    }
                }
                stage("perform the docker linting"){
                    steps {
                        script{
                            sh """
                            docker pull hadolint/hadolint
                            docker run --rm -i hadolint/hadolint < dockerfile
                            npm install --global dockerlinter
                            dockerlinter -f Dockerfile
                            """
                        }
                    }
                }
                stage("yaml or json schema valdiation"){
                    steps {
                        script{
                            sh """
                            """
                        }
                    }
                }
                stage("secretes detection"){
                    steps{
                        script{
                            sh """
                            gitleaks detect --source=. --verbose --redact
                            trufflehog filesystem . --no-update
                            """
                        }
                    }
                }
                stage("install the dependencies"){
                    steps{
                        script{
                            echo "Linting the  dependencies for ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh 'pip install -r requirements.txt || true'
                            } else if (DETECTED_LANG == 'node') {
                                sh 'npm install || true'
                            } else if (DETECTED_LANG == 'go') {
                                sh 'go mod tidy || true'
                            } else if (DETECTED_LANG == 'java') {
                                sh 'mvn clean install'
                            } else if (DETECTED_LANG == 'rust') {
                                sh 'cargo fetch || true'
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("dependendency scanning or software composition analyssis"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pip-audit
                                bandit -r src/main.py
                                snyk test --file=requirements.txt
                                dependency-check.sh  --file=requirements.txt
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npm audit
                                npm install --save-dev jest supertest
                                npm audit fix
                                snyk test --file=package.json
                                dependency-check.sh --project NodeApp --scan ./ --format ALL"""
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                govulncheck ./...
                                snyk test --file=go.mod
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                snyk test --file=pom.xml 
                                dependency-check.sh --project JavaApp --scan ./ --format ALL
                                mvn org.owasp:dependency-check-maven:check 
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo audit
                                snyk test --file=Cargo.toml
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                        }
                    }
                }
                stage("type checking"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                mypy src/
                                pyright src/
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """"""
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go vet src/main.go
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn compile
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo check
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("perform the unit tests"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest tests/test.py          
                                python tests/test_main_unittest.py   ###unittest
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npm test
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test ./test
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn test
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo test
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("test code coverage calvulation"){
                    steps{
                        script {
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                coverage run --source=src -m unittest discover -s tests
                                coverage run --source=src tests/test_main_unittest.py
                                coverage run --source=src tests/test.py
                                pytest --cov=src tests/test_main_unittest.py
                                pytest --cov=src tests/test.py
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npm run test:coverage
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test -coverprofile=coverage.out ./test
                                go tool cover -html=coverage.out  
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn verify
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo tarpaulin
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("perform the static code analysis using sonarqueb"){
                    steps{
                        script{
                            sh """
                            /opt/sonar-scanner/bin/sonar-scanner
                            """
                        }
                    }
                }
                stage("mutation testing at dev "){
                    steps {
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """"""
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx stryker run
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go-mutesting ./src
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn org.pitest:pitest-maven:mutationCoverage
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo mutagen
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("snap shot testing at dev"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npm run test:snapshot
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """"""
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo insta test
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                            sh """
                            
                            """
                        }
                    }
                }
                stage("component testing at dev"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest tests/
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npm run test
                                # or
                                npx jest
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test ./...
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn test
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo test
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                    
                        }
                    }
                }
                stage("feature flag verification at dev"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest test_feature_flags.py
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx jest
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test ./...
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """"""
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo test
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }

                stage("building the application"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """"""
                            } else if (DETECTED_LANG == 'node') {
                                sh """"""
                            } else if (DETECTED_LANG == 'go') {
                                sh """"""
                            } else if (DETECTED_LANG == 'java') {
                                sh """"""
                            } else if (DETECTED_LANG == 'rust') {
                                sh """"""
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                            sh """
                            """
                        }
                    }
                }
                stage("create the archiving file"){
                    steps{
                        script{
                            sh """
                            zip -r src.zip src/
                            """
                        }
                    }
                }
                stage("push the artifact to the nexus or jfrog or other artifact storage platforms"){
                    steps{
                        script{
                            sh """
                            """
                        }
                    }
                }
                stage("perform the docker image build"){
                    steps{
                        script{
                            sh """
                            docker build -t frontend-dev:${env.version} .
                            """
                        }
                    }
                }
                stage("docker linting and  image validation"){
                    steps{
                        script{
                            sh """
                            docker image inspect frontend-dev:${env.version}
                            docker pull hadolint/hadolint
                            docker run --rm -i hadolint/hadolint < dockerfile
                            """
                        }
                    }
                }

                stage("perform the container scanning using trivy"){
                    steps{
                        script{
                            sh """
                            trivy image --format table frontend-dev:${env.version}       # Table format
                            trivy image --format json frontend-dev:${env.version}    # JSON format
                            trivy image --scanners secret --format json --output trivy-secrets.json frontend-dev:${env.version} 
                            """
                        }
                    }
                }
                stage("perform the container scanning using snyk"){
                    steps{
                        script{
                            sh """
                            snyk container test frontend-dev:${env.version}  --file=Dockerfile
                            snyk container test frontend-dev:${env.version}  
                            snyk test --file=Dockerfile
                            snyk test --docker frontend-dev:${env.version} 
                            """
                        }
                    }
                }
                stage("perform the container scanning using dockerr scout "){
                    steps{
                        script{
                            sh """
                            docker scout quickview frontend-dev:${env.version} 
                            docker scout cves frontend-dev:${env.version} 
                            """
                        }
                    }

                }
                stage("perfomr the container scanning using the grype"){
                    steps{
                        script{
                            sh """
                            grype frontend-dev:${env.version}
                            grype frontend-dev:${env.version} -o table
                            grype frontend-dev:${env.version} -o json
                            """
                        }
                    }
                }
                stage("perform the container scannning using the syft and dockel"){
                    steps{
                        script{
                            sh """
                            syft frontend-dev:${env.version} 
                            dockle frontend-dev:${env.version}
                            """
                        }
                    }
                }

                stage("perform the integration with the docker containers"){
                    steps{
                        script{
                            sh """
                            # 1. Start containers
                            docker-compose up -d

                            3 3. Stop and remove containers
                            docker-compose down
                            """
                        }
                    }
                }
        
                stage("ui/componenet testing"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """"""
                            } else if (DETECTED_LANG == 'node') {
                                sh """"""
                            } else if (DETECTED_LANG == 'go') {
                                sh """"""
                            } else if (DETECTED_LANG == 'java') {
                                sh """"""
                            } else if (DETECTED_LANG == 'rust') {
                                sh """"""
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                            sh """"""
                        }
                    }
                }
                stage("static security analysis"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                bandit -r src/
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx eslint src/
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                gosec ./...
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn spotbugs:spotbugs
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo audit          # Check for dependency vulnerabilities
                                cargo clippy         # Static linting and style issues
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                            sh """
                            """
                        }
                    }
                }
                stage("chaos testing"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                chaos run experiment.json
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """"""
                            } else if (DETECTED_LANG == 'go') {
                                sh """"""
                            } else if (DETECTED_LANG == 'java') {
                                sh """"""
                            } else if (DETECTED_LANG == 'rust') {
                                sh """"""
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                            
                        }
                    }
                }
                stage("push the docker image to the specified registry"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("perform the security scanning analysis"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                bandit -r src/
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npm install --save-dev eslint-plugin-security
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                gosec ./...
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn com.github.spotbugs:spotbugs-maven-plugin:spotbugs
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo clippy
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("deploy to dev"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("perform the smoke testing after dev deploy"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """ 
                                pytest test_smoke.py
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx jest smoke.test.js
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test smoke_test.go
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn test
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo test --test smoke
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                            sh """"""
                        }
                    }
                }
                stage("perform the sanity testing after dev deploy"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest test_sanity.py
                                pytest -m sanity
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npm run test:sanity
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test -run TestSanity
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn -Dtest=SanityTest test
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo test --test sanity
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                            sh """"""
                        }
                    }
                }
                stage("perform the API testing after dev deploy"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest test_api.py
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx jest
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn test
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                Cargo test
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                            sh """"""
                        }
                    }
                }
                stage("perform the integration testing after dev deploy"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest tests/integration/
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx jest tests/integration
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test -v -run TestHealthCheck
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """"""
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo test --test integration_test
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("perform the Light UI tests after dev deploy"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """"""
                            } else if (DETECTED_LANG == 'node') {
                                sh """"""
                            } else if (DETECTED_LANG == 'go') {
                                sh """"""
                            } else if (DETECTED_LANG == 'java') {
                                sh """"""
                            } else if (DETECTED_LANG == 'rust') {
                                sh """"""
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                            sh """"""
                        }
                    }
                }
                stage("perform the regression testing after dev deploy"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest -m regression
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx jest tests/cart.regression.test.js
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test -v regression_test.go
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn test -Dgroups=regression
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo test test_cart_total
                                cargo test --test regression_cart
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                            sh """"""
                        }
                    }
                }
                stage("perform the feature flag checks after dev deploy"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest test_feature_flags.py
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx jest
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test ./...
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """"""
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo test
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("perform the security checks after dev deploy"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                bandit -r src/
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npm install --save-dev eslint-plugin-security
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                gosec ./...
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn com.github.spotbugs:spotbugs-maven-plugin:spotbugs
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo clippy
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("perform chaos testing after dev deploy"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                chaos run experiment.json
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """"""
                            } else if (DETECTED_LANG == 'go') {
                                sh """"""
                            } else if (DETECTED_LANG == 'java') {
                                sh """"""
                            } else if (DETECTED_LANG == 'rust') {
                                sh """"""
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("perform the logging and monitoring checks  after dev deploy"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("perform the light load or performance testing after dev deploy"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                locust -f locustfile.py --host=http://localhost:8000
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                artillery run test.yml
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                k6 run test.js
                                go test -bench=.
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """"""
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                wrk -t12 -c400 -d30s http://localhost:8000/api/hello
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                            sh """"""
                        }
                    }
                }
                stage('Send Email Notification') {
                    steps {
                        script {
                            def subject = "‚úÖ Build Passed: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                            def body = """
                                <p>Hello Team,</p>
                                <p>The Jenkins job <b>${env.JOB_NAME} #${env.BUILD_NUMBER}</b> has completed the build stage successfully.</p>
                                <p>Please review and approve to proceed to the deployment stage.</p>
                                <p>Link to build: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                            """
                            emailext(
                                to: env.RECIPIENTS,
                                subject: subject,
                                body: body,
                                mimeType: 'text/html'
                            )
                        }
                    }
                }
                stage("need the manual approval that dev stage is successful"){
                    steps {
                        script {
                            input message: "Do you approve deployment to stag and send the artifact to the client?",
                            ok: "Deploy Now",
                            submitter: "manager,admin" // Optional: restrict who can approve
                        }
                }
                }
                stage("Generate Version File dev env") {
                    agent { label 'security-agent'}
                    steps {
                        script {
                            def version = sh(script: "git describe --tags \$(git rev-list --tags --max-count=1)", returnStdout: true).trim()
                            def commit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                            def branch = 'dev'
                            def date = sh(script: "date -u +'%Y-%m-%dT%H:%M:%SZ'", returnStdout: true).trim()

                            writeFile file: "version-dev${version}.txt", text: """
                                VERSION=${version}
                                BUILD_NUMBER=${env.BUILD_NUMBER}
                                BUILD_DATE=${date}
                                GIT_COMMIT=${commit}
                                GIT_BRANCH=${branch}
                                BUILD_BY=jenkins
                            """.stripIndent()

                            echo "Generated version.txt"
                            sh """
                            aws s3 cp version-dev${version}.txt s3://your-bucket-name/path/to/version.txt
                            """
                    }
                }
                }
                stage('Send Email Notification about the development environment') {
                    steps {
                        script {
                            def subject = "‚úÖ Build Passed: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                            def body = """
                                <p>Hello Team,</p>
                                <p>The Jenkins job <b>${env.JOB_NAME} #${env.BUILD_NUMBER}</b> has completed the build stage successfully.</p>
                                <p>Please review and approve to proceed to the deployment stage.</p>
                                <p>Link to build: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                            """
                            emailext(
                                to: env.RECIPIENTS,
                                subject: subject,
                                body: body,
                                mimeType: 'text/html'
                            )
                        }
                    }
                }
                
            }
        }
           
        stage("test env workflow") {
            when {
                branch 'test' // or 'prod' depending on your naming
            }
            stages{
                stage('sending the mail noitification to remaind about the approval for next stage') {
                    steps {
                        script {
                            def subject = "‚úÖ Build Passed: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                            def body = """
                                <p>Hello Team,</p>
                                <p>The Jenkins job <b>${env.JOB_NAME} #${env.BUILD_NUMBER}</b> has completed the build stage successfully.</p>
                                <p>Please review and approve to proceed to the deployment stage.</p>
                                <p>Link to build: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                            """
                            emailext(
                                to: env.RECIPIENTS,
                                subject: subject,
                                body: body,
                                mimeType: 'text/html'
                            )
                        }
                    }
                }
                stage("need the manual approval to start test en"){
                    steps {
                        script {
                            input message: "Do you approve deployment to stag and send the artifact to the client?",
                            ok: "Deploy Now",
                            submitter: "manager,admin" // Optional: restrict who can approve
                        }
                }
                }
            
                stage("clone the repo with test branch"){
                    steps {
                        script{
                            // Clone the dev branch
                            git branch: 'test',url: "https://github.com/ammohan6212/front-end.git"
                            // git branch: 'dev',credentialsId: 'github-token',url: "https://github.com/ammohan6212/front-end.git"

                            // Fetch all tags
                            sh 'git fetch --tags'

                            // Get the latest tag correctly
                            def version = sh(
                                script: "git describe --tags \$(git rev-list --tags --max-count=1)",
                                returnStdout: true
                            ).trim()
                            env.version = version
                            echo "VERSION=${env.VERSION}"
                        }
                        
                    }
                }
                stage("static code analysis at test"){
                    steps{
                        script{
                            sh """
                            /opt/sonar-scanner/bin/sonar-scanner
                            """
                        }
                    }
                }
                stage("unit test analysis at test"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest tests/test.py          
                                python tests/test_main_unittest.py   ###unittest
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npm test
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test ./test
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn test
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo test
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("install dependencies and scan dependencies at test"){
                    steps{
                        script{
                            echo "Linting the  dependencies for ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh 'pip install -r requirements.txt || true'
                            } else if (DETECTED_LANG == 'node') {
                                sh 'npm install || true'
                            } else if (DETECTED_LANG == 'go') {
                                sh 'go mod tidy || true'
                            } else if (DETECTED_LANG == 'java') {
                                sh 'mvn clean install'
                            } else if (DETECTED_LANG == 'rust') {
                                sh 'cargo fetch || true'
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("code coverage at test"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                coverage run --source=src -m unittest discover -s tests
                                coverage run --source=src tests/test_main_unittest.py
                                coverage run --source=src tests/test.py
                                pytest --cov=src tests/test_main_unittest.py
                                pytest --cov=src tests/test.py
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npm run test:coverage
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test -coverprofile=coverage.out ./test
                                go tool cover -html=coverage.out  
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn verify
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo tarpaulin
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("create the archiving file at test stage"){
                    steps{
                        script{
                            sh """
                            zip -r src.zip src/
                            """
                        }
                    }
                }
                stage("push the artifact to the nexus or jfrog or other artifact storage platforms at test stage"){
                    steps{
                        script{
                            sh """
                            """
                        }
                    }
                }
                stage("perform the docker image build at test env "){
                    steps{
                        script{
                            sh """
                            docker build -t frontend-test:${env.version} .
                            """
                        }
                    }
                }
                stage("docker linting and  image validation at test env"){
                    steps{
                        script{
                            sh """
                            docker image inspect frontend-test:${env.version}
                            """
                        }
                    }
                }

                stage("perform the container scanning using trivy at test env"){
                    steps{
                        script{
                            sh """
                            trivy image --format table frontend-test:${env.version}       # Table format
                            trivy image --format json frontend-test:${env.version}    # JSON format
                            trivy image --scanners secret --format json --output trivy-secrets.json frontend-test:${env.version}
                            """
                        }
                    }
                }
                stage("perform the container scanning using snyk at test env"){
                    steps{
                        script{
                            sh """
                            snyk container test frontend-test:${env.version} --file=Dockerfile
                            snyk container test frontend-test:${env.version}
                            snyk test --file=Dockerfile 
                            snyk test --docker frontend-test:${env.version}
                            """
                        }
                    }
                }
                stage("perform the container scanning using dockerr scout at test env"){
                    steps{
                        script{
                            sh """
                            docker scout quickview frontend-test:${env.version}  #
                            docker scout cves frontend-test:${env.version}
                            """
                        }
                    }

                }
                stage("perfomr the container scanning using the grype at test env"){
                    steps{
                        script{
                            sh """
                            grype frontend-test:${env.version}
                            grype frontend-test:${env.version} -o table
                            grype frontend-test:${env.version} -o json
                            """
                        }
                    }
                }
                stage("perform the container scannning using the syft and dockel at test env "){
                    steps{
                        script{
                            sh """
                            syft frontend-test:${env.version}
                            dockle frontend-test:${env.version}
                            """
                        }
                    }
                }
                stage("push the docker image to the repository in test env at test env"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("deploy to test"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("smoke test in test env"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """ 
                                pytest test_smoke.py
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx jest smoke.test.js
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test smoke_test.go
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn test
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo test --test smoke
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("sanity tests in test env"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest test_sanity.py
                                pytest -m sanity
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npm run test:sanity
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test -run TestSanity
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn -Dtest=SanityTest test
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo test --test sanity
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("full integration tests in test env"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest tests/integration/
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx jest tests/integration
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test -v -run TestHealthCheck
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """"""
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo test --test integration_test
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("functional testing in test env"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest test_api.py
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx jest
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn test
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                Cargo test
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("API testing in test env"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest test_api.py
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx jest
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn test
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                Cargo test
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("regression testing in test env"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest -m regression
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx jest tests/cart.regression.test.js
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test -v regression_test.go
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn test -Dgroups=regression
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo test test_cart_total
                                cargo test --test regression_cart
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("database testing in test env"){
                    steps{
                        script{
                            echo "dependency scanning for  ${DETECTED_LANG}..."
                            if (DETECTED_LANG == 'python') {
                                sh """
                                pytest test_db.py
                                """
                            } else if (DETECTED_LANG == 'node') {
                                sh """
                                npx jest
                                """
                            } else if (DETECTED_LANG == 'go') {
                                sh """
                                go test 
                                """
                            } else if (DETECTED_LANG == 'java') {
                                sh """
                                mvn test -Dgroups=regression
                                """
                            } else if (DETECTED_LANG == 'rust') {
                                sh """
                                cargo test
                                """
                            } else {
                                echo "‚ö†Ô∏è Language unknown. Skipping dependency installation."
                            }
                        }
                    }
                }
                stage("Generate Version File dev env") {
                    agent { label 'security-agent'}
                    steps {
                        script {
                            def version = sh(script: "git describe --tags \$(git rev-list --tags --max-count=1)", returnStdout: true).trim()
                            def commit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                            def branch = 'test'
                            def date = sh(script: "date -u +'%Y-%m-%dT%H:%M:%SZ'", returnStdout: true).trim()

                            writeFile file: "version-test${version}.txt", text: """
                                VERSION=${version}
                                BUILD_NUMBER=${env.BUILD_NUMBER}
                                BUILD_DATE=${date}
                                GIT_COMMIT=${commit}
                                GIT_BRANCH=${branch}
                                BUILD_BY=jenkins
                            """.stripIndent()

                            echo "Generated version.txt"
                            sh """
                            aws s3 cp version-test${version}.txt s3://your-bucket-name/path/to/version.txt
                            """
                    }
                }
                }
                stage("send the remainder about need the manual approval"){
                    steps{
                        script{
                            def subject = "‚úÖ Build Passed: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                            def body = """
                                <p>Hello Team,</p>
                                <p>The Jenkins job <b>${env.JOB_NAME} #${env.BUILD_NUMBER}</b> has completed the build stage successfully.</p>
                                <p>Please review and approve to proceed to the deployment stage.</p>
                                <p>Link to build: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                            """
                            emailext(
                                to: env.RECIPIENTS,
                                subject: subject,
                                body: body,
                                mimeType: 'text/html'
                            )
                        }
                    }
                }
                stage("need to approval for wheather test is sucessful or not"){
                    steps{
                        script{
                            input message: "Do you approve deployment to stag and send the artifact to the client?",
                            ok: "Deploy Now",
                            submitter: "manager,admin" 
                        }
                    }
                }
                stage("send the notification to the devloper that test env is sucess"){
                    steps{
                        script{
                            def subject = "‚úÖ Build Passed: ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                            def body = """
                                <p>Hello Team,</p>
                                <p>The Jenkins job <b>${env.JOB_NAME} #${env.BUILD_NUMBER}</b> has completed the build stage successfully.</p>
                                <p>Please review and approve to proceed to the deployment stage.</p>
                                <p>Link to build: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                            """
                            emailext(
                                to: env.RECIPIENTS,
                                subject: subject,
                                body: body,
                                mimeType: 'text/html'
                            )
                        }
                    }
                }
            }
        }
        stage("stag env workflow management"){
            when {
                branch 'stag' // or 'prod' depending on your naming
                    }
            stages{
                stage("Approval Before  Deploying to QA stag") {
                    steps {
                        script {
                            input message: "Do you approve deployment to stag and send the artifact to the client?",
                                ok: "Deploy Now",
                                submitter: "manager,admin" // Optional: restrict who can approve
                        }
                    }
                }
                stage("code checkout and initializaation at staging environment"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("static code analysis at stag"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("unit test analysis at stag"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("install dependencies and scan dependencies at stag"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("code coverage at stag"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("create the archiving file at stag env"){
                    steps{
                        script{
                            sh """
                            zip -r src.zip src/
                            """
                        }
                    }
                }
                stage("push the artifact to the nexus or jfrog or other artifact storage platforms at stag"){
                    steps{
                        script{
                            sh """
                            """
                        }
                    }
                }
                stage("perform the docker image build for stag env"){
                    steps{
                        script{
                            sh """
                            docker build -t frontend-QA:${env.version} .
                            """
                        }
                    }
                }
                stage("docker linting and  image validation at stag env"){
                    steps{
                        script{
                            sh """
                            docker image inspect frontend-QA:${env.version} 
                            """
                        }
                    }
                }

                stage("perform the container scanning using trivy at stag env"){
                    steps{
                        script{
                            sh """
                            trivy image --format table frontend-QA:${env.version}        # Table format
                            trivy image --format json frontend-QA:${env.version}    # JSON format
                            trivy image --scanners secret --format json --output trivy-secrets.json frontend-QA:${env.version} 
                            """
                        }
                    }
                }
                stage("perform the container scanning using snyk at stag env"){
                    steps{
                        script{
                            sh """
                            snyk container test frontend-QA:${env.version}  --file=Dockerfile
                            snyk container test frontend-QA:${env.version} 
                            snyk test --file=Dockerfile 
                            snyk test --docker frontend-QA:${env.version} 
                            """
                        }
                    }
                }
                stage("perform the container scanning using dockerr scout  at stag env")
                    steps{
                        script{
                            sh """
                            docker scout quickview frontend-QA:${env.version}   #
                            docker scout cves frontend-QA:${env.version} 
                            """
                        }
                    }

                }
                stage("perfomr the container scanning using the grype at stag env"){
                    steps{
                        script{
                            sh """
                            grype frontend-QA:${env.version} 
                            grype frontend-QA:${env.version}  -o table
                            grype frontend-QA:${env.version}  -o json
                            """
                        }
                    }
                }
                stage("perform the container scannning using the syft and dockel at stag env"){
                    steps{
                        script{
                            sh """
                            syft frontend-QA:${env.version} 
                            dockle frontend-QA:${env.version} 
                            """
                        }
                    }
                }
                stage("push the docker image to the repository in stag env"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("deploy to QA or stag env"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("smoke test in QA env"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("sanity tests in QA env"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("full integration tests in QA env"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("functional testing in QA env"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("API testing in QA env"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("regression testing in QA env"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("database testing in QA env"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("QA manual tests"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("Generate Version File QA env") {
                    agent { label 'security-agent'}
                    steps {
                        script {
                            def version = sh(script: "git describe --tags \$(git rev-list --tags --max-count=1)", returnStdout: true).trim()
                            def commit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                            def branch = 'stag'
                            def date = sh(script: "date -u +'%Y-%m-%dT%H:%M:%SZ'", returnStdout: true).trim()

                            writeFile file: "version-stag${version}.txt", text: """
                                VERSION=${version}
                                BUILD_NUMBER=${env.BUILD_NUMBER}
                                BUILD_DATE=${date}
                                GIT_COMMIT=${commit}
                                GIT_BRANCH=${branch}
                                BUILD_BY=jenkins
                            """.stripIndent()

                            echo "Generated version.txt"
                            sh """
                            aws s3 cp version-stag${version}.txt s3://your-bucket-name/path/to/version.txt
                            """
                    }
                }
                }
                stage("QA test is completed"){
                    steps{
                        script{
                            input message: "need QA approval to deploy to the next stageAfter successful testing, QA adds a comment in Jira?",
                            ok: "Deploy Now",
                            submitter: "QA"
                        }
                    }
                }
                stage("need to approval for wheather QA is sucessful or not"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("send notification that QA env is successful"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
            }
        }
        stage("preprod environment workflow"){
            when { branch 'preprod'}
            stages{
                stage("need the approvals from the manager for preproduction deployment") {
                    steps {
                        script {
                            input message: "Do you approve deployment to stag and send the artifact to the client?",
                            ok: "Deploy Now",
                                submitter: "manager,admin" // Optional: restrict who can approve
                        }
                    }
                }
                stage("code checkout and initializaation to deploy the code into the UAT"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("static code analysis at preprod"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("unit test analysis at preprod"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("install dependencies and scan dependencies at preprod"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("code coverage at preprod"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("create the archiving file at preprod"){
                    steps{
                        script{
                            sh """
                            zip -r src.zip src/
                            """
                        }
                    }
                }
                stage("push the artifact to the nexus or jfrog or other artifact storage platforms at preprod stage"){
                    steps{
                        script{
                            sh """
                            """
                        }
                    }
                }
                stage("perform the docker image build at preprod stage"){
                    steps{
                        script{
                            sh """
                            docker build -t frontend-preprod:${env.version} .
                            """
                        }
                    }
                }
                stage("docker linting and  image validation at preprod stage"){
                    steps{
                        script{
                            sh """
                            docker image inspect frontend-preprod:${env.version}
                            """
                        }
                    }
                }

                stage("perform the container scanning using trivy at preprod stage"){
                    steps{
                        script{
                            sh """
                            trivy image --format table frontend-preprod:${env.version}       # Table format
                            trivy image --format json frontend-preprod:${env.version}    # JSON format
                            trivy image --scanners secret --format json --output trivy-secrets.json frontend-preprod:${env.version} 
                            """
                        }
                    }
                }
                stage("perform the container scanning using snyk at preprod stage"){
                    steps{
                        script{
                            sh """
                            snyk container test frontend-preprod:${env.version} --file=Dockerfile
                            snyk container test frontend-preprod:${env.version} 
                            snyk test --file=Dockerfile 
                            snyk test --docker frontend-preprod:${env.version}
                            """
                        }
                    }
                }
                stage("perform the container scanning using dockerr scout at preprod stage"){
                    steps{
                        script{
                            sh """
                            docker scout quickview frontend-preprod:${env.version}   #
                            docker scout cves frontend-preprod:${env.version}
                            """
                        }
                    }

                }
                stage("perfomr the container scanning using the grype at preprod stage"){
                    steps{
                        script{
                            sh """
                            grype frontend-preprod:${env.version}
                            grype frontend-preprod:${env.version} -o table
                            grype frontend-preprod:${env.version} -o json
                            """
                        }
                    }
                }
                stage("perform the container scannning using the syft and dockel at preprod stage"){
                    steps{
                        script{
                            sh """
                            syft frontend-preprod:${env.version}
                            dockle frontend-preprod:${env.version}
                            """
                        }
                    }
                }
                stage("push the docker image to respective repository at preprod stage"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("here we deploy the code to the preprod"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("smoke test perform here in preprod"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("sanity test perform here in preprod"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("UAT tests will be performed here"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("regression test at preprod or UAT"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("performance tests at UAT pr UAT"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("database migration tests at UAT or preprod"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("load/stress tests at UAT or preprod  "){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("security tests at preprod or UAT"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("failover/chaos tests at UAT or preprod"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("need to approval for wheather preprod is sucessful or not"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("send the notification wheather preprod is successful or not"){
                    steps{
                        script{
                            sh """"""
                        }
                    }

                }
            }
        }
        stage("prod environment workflow "){
            when {
                branch 'main'
            } 
            stages{
                stage("create the change request containing what is changing and any DB changes and any downtime and rollback plan if deplyoment failes and deploymentwindow and stakeholders"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("need the CAB approvals before deplyign to the production"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("need the approvals from the manager and security approvals forproduction deployment") {
                    steps {
                        script {
                            input message: "Do you approve deployment to stag and send the artifact to the client?",
                            ok: "Deploy Now",
                                submitter: "manager,admin" // Optional: restrict who can approve
                        }
                    }
                }
                stage("code checkout and initializaation for prod"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("static code analysis at prod"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("unit test analysis at prod"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("install dependencies and scan dependencies at prod"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("code coverage at prod"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("create the archiving file at prod stage"){
                    steps{
                        script{
                            sh """
                            zip -r src.zip src/
                            """
                        }
                    }
                }
                stage("push the artifact to the nexus or jfrog or other artifact storage platforms at prod stage"){
                    steps{
                        script{
                            sh """
                            """
                        }
                    }
                }
                stage("perform the docker image build at prod "){
                    steps{
                        script{
                            sh """
                            docker build -t frontend-prod:${env.version} .
                            """
                        }
                    }
                }
                stage("docker linting and  image validation at prod"){
                    steps{
                        script{
                            sh """
                            docker image inspect frontend-prod:${env.version}
                            """
                        }
                    }
                }

                stage("perform the container scanning using trivy at prod"){
                    steps{
                        script{
                            sh """
                            trivy image --format table frontend-prod:${env.version}      # Table format
                            trivy image --format json frontend-prod:${env.version}   # JSON format
                            trivy image --scanners secret --format json --output trivy-secrets.json frontend-prod:${env.version}
                            """
                        }
                    }
                }
                stage("perform the container scanning using snyk at prod"){
                    steps{
                        script{
                            sh """
                            snyk container test frontend-prod:${env.version} --file=Dockerfile
                            snyk container test frontend-prod:${env.version}
                            snyk test --file=Dockerfile 
                            snyk test --docker frontend-prod:${env.version}
                            """
                        }
                    }
                }
                stage("perform the container scanning using dockerr scout at prod"){
                    steps{
                        script{
                            sh """
                            docker scout quickview frontend-prod:${env.version}   #
                            docker scout cves frontend-prod:${env.version}
                            """
                        }
                    }

                }
                stage("perfomr the container scanning using the grype at prod"){
                    steps{
                        script{
                            sh """
                            grype frontend-prod:${env.version}
                            grype frontend-prod:${env.version} -o table
                            grype frontend-prod:${env.version} -o json
                            """
                        }
                    }
                }
                stage("perform the container scannning using the syft and dockel at pod"){
                    steps{
                        script{
                            sh """
                            syft frontend-prod:${env.version}
                            dockle frontend-prod:${env.version}
                            """
                        }
                    }
                }
                stage("push the docker image to the respective repository for prod"){
                    steps{
                        script{
                            sh """
                            
                            """
                        }
                    }
                }

                stage("need the manual approval to deploy to main branch at prod "){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("deploy to prod environment during the off-peak hours"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                stage("smoke tests after prod deployment"){
                    steps {
                        script {
                            sh """"""
                    }
                }
                }
                stage("sanity check after prod deployments"){
                    steps{
                        script{
                            sh """"""
                        }
                    }
                }
                
                stage("synthatic tests after prod  deployment"){
                    steps {
                        script {
                            sh """"""
                    }
                }
                }
                stage("monitoring the prod environment"){
                    steps {
                        script {
                            sh """"""
                        }
                    }
                }
                stage("if prod fails rollback to the previous verion"){
                    steps { 
                        script {
                            sh """"""
                        }
                    }
                }
                stage("need the manual approvals from lead developer and QA/test manager and businnes stakeholder,change advisory board "){
                    steps{
                        script {
                            sh """"""
                        }
                    }
                }
                stage("production deployment is succeesful inform the stakeholders"){
                    steps {
                        script {
                            sh """"""
                        }
                    }
                }
                stage("Generate Version File prod env") {
                    agent { label 'security-agent'}
                    steps {
                        script {
                            def version = sh(script: "git describe --tags \$(git rev-list --tags --max-count=1)", returnStdout: true).trim()
                            def commit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                            def branch = 'main'
                            def date = sh(script: "date -u +'%Y-%m-%dT%H:%M:%SZ'", returnStdout: true).trim()

                            writeFile file: "version-main${version}.txt", text: """
                                VERSION=${version}
                                BUILD_NUMBER=${env.BUILD_NUMBER}
                                BUILD_DATE=${date}
                                GIT_COMMIT=${commit}
                                GIT_BRANCH=${branch}
                                BUILD_BY=jenkins
                            """.stripIndent()
                            echo "Generated version.txt"
                            sh """
                            aws s3 cp version-main${version}.txt s3://your-bucket-name/path/to/version.txt
                            """
                        }
                    }
                }
            }
        }
    

